name: 'build'

on:
  schedule:
    - cron: '1 23 * * 5'
  push:
    paths:
      - '**'
      - '!README.md'

jobs:
  build:
    runs-on: ubuntu-latest
    permissions:
      packages: write
      contents: read
    strategy:
      matrix:
        distro_variant:
          - "edge"
          - "3.20"
          - "3.19"
          - "3.18"
          - "3.17"
          - "3.16"
          - "3.15"
          - "3.14"
          - "3.13"
          - "3.12"
          - "3.11"
          - "3.10"
          - "3.9"
          - "3.8"
          - "3.7"
          - "3.6"
          - "3.5"
    env:
      build_file: Dockerfile

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Prepare Environment
        id: prep
        run: |
          # Determine platforms based on distro_variant
          case "${{ matrix.distro_variant }}" in
            "3.7" | "3.6" | "3.5")
              platforms="linux/amd64"
              ;;
            *)
              platforms="linux/amd64,linux/arm64,linux/arm/v7"
              ;;
          esac

          echo "platforms=$platforms" >> $GITHUB_ENV

          # Generate image tags
          if [[ "${GITHUB_REF}" == refs/heads/* ]]; then
            branch_name=${GITHUB_REF#refs/heads/}
          elif [[ "${GITHUB_REF}" == refs/tags/* ]]; then
            branch_name=${GITHUB_REF#refs/tags/}
          fi

          # Generate image tags
          case "$branch_name" in
            "main" | "master")
              image_tags="${GITHUB_REPOSITORY}:${{ matrix.distro_variant }},${GITHUB_REPOSITORY}:${{ matrix.distro_variant }}-latest"
              ;;
            "develop")
              image_tags="${GITHUB_REPOSITORY}:develop"
              ;;
            *)
              image_tags="${GITHUB_REPOSITORY}:${branch_name}-${{ matrix.distro_variant }}"
              ;;
          esac

          echo "dockerhub_repo=${GITHUB_REPOSITORY/docker-/}" >> $GITHUB_ENV
          dockerhub_images=$(echo "${image_tags}" | sed "s|${GITHUB_REPOSITORY}|docker.io/${GITHUB_REPOSITORY/docker-/}|g")
          ghcr_images=$(echo "${image_tags}" | sed "s|${GITHUB_REPOSITORY}|ghcr.io/${GITHUB_REPOSITORY}|g")
          echo "container_images=${dockerhub_images},${ghcr_images}" >> $GITHUB_OUTPUT

      - name: Add Metadata Labels
        id: label
        run: |
          # Add labels to Dockerfile
          image_name=${GITHUB_REPOSITORY/docker-/}
          if [[ -f "${{ env.build_file }}" ]]; then
            sed -i "/FROM .*/a LABEL org.opencontainers.image.source=\"https://github.com/${GITHUB_REPOSITORY}\"" ${{ env.build_file }}
            sed -i "/FROM .*/a LABEL org.opencontainers.image.version=\"${GITHUB_SHA}\"" ${{ env.build_file }}
            sed -i "/FROM .*/a LABEL org.opencontainers.image.created=\"$(date +'%Y-%m-%dT%H:%M:%SZ')\"" ${{ env.build_file }}
          fi

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
        with:
          # Enable BuildX caching
          buildkitd-flags: --debug

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3
        with:
          platforms: arm,arm64

      - name: Login to DockerHub
        if: github.event_name != 'pull_request'
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Login to GitHub Container Registry
        if: github.event_name != 'pull_request'
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ github.token }}

      # Add cache for Docker layers
      - name: Cache Docker layers
        uses: actions/cache@v4
        with:
          path: /tmp/.buildx-cache
          key: ${{ runner.os }}-buildx-${{ matrix.distro_variant }}-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-buildx-${{ matrix.distro_variant }}-
            ${{ runner.os }}-buildx-

      - name: Build and Push Docker Image
        if: github.event_name != 'pull_request'
        uses: docker/build-push-action@v6
        with:
          builder: ${{ steps.buildx.outputs.name }}
          context: .
          file: ./${{ env.build_file }}
          platforms: ${{ env.platforms }}
          push: true
          tags: ${{ steps.prep.outputs.container_images }}
          build-args: |
            ALPINE_VERSION=${{ matrix.distro_variant }}
          # Configure caching
          cache-from: type=local,src=/tmp/.buildx-cache
          cache-to: type=local,dest=/tmp/.buildx-cache-new,mode=max

      # Temporary fix for cache size growth
      - name: Move cache
        run: |
          rm -rf /tmp/.buildx-cache
          mv /tmp/.buildx-cache-new /tmp/.buildx-cache