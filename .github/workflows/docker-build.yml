name: Build and Push Docker Images

on:
  push:
    branches:
      - main
      - master
  pull_request:
    branches:
      - main
      - master

env:
  DOCKERHUB_USERNAME: ${{ secrets.DOCKERHUB_USERNAME }}
  IMAGE_NAME: ${{ secrets.DOCKERHUB_USERNAME }}/alpine

jobs:
  # AMD64 build jobs for all versions
  build-amd64:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        version: [3.20.3, 3.19.4, 3.18.9, 3.17.10]
    steps:
      - uses: actions/checkout@v4
      
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3
        
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
        
      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Extract version components
        id: version
        run: |
          MAJOR_MINOR=$(echo "${{ matrix.version }}" | cut -d'.' -f1,2)
          echo "major_minor=${MAJOR_MINOR}" >> $GITHUB_OUTPUT

      - name: Build and push AMD64 images
        uses: docker/build-push-action@v5
        with:
          context: ./alpine-${{ matrix.version }}/amd64/
          platforms: linux/amd64
          push: true
          tags: |
            ${{ env.IMAGE_NAME }}:${{ matrix.version }}-x86_64
            ${{ env.IMAGE_NAME }}:${{ matrix.version }}-amd64
            ${{ env.IMAGE_NAME }}:${{ steps.version.outputs.major_minor }}-x86_64
            ${{ env.IMAGE_NAME }}:${{ steps.version.outputs.major_minor }}-amd64
          build-args: |
            VCS_REF=${{ github.sha }}
            BUILD_DATE=$(date -u +'%Y-%m-%dT%H:%M:%SZ')

  # ARM32v7 build jobs for all versions
  build-arm32v7:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        version: [3.20.3, 3.19.4, 3.18.9, 3.17.10]
    steps:
      - uses: actions/checkout@v4
      
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3
        
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
        
      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Extract version components
        id: version
        run: |
          MAJOR_MINOR=$(echo "${{ matrix.version }}" | cut -d'.' -f1,2)
          echo "major_minor=${MAJOR_MINOR}" >> $GITHUB_OUTPUT

      - name: Build and push ARM32v7 images
        uses: docker/build-push-action@v5
        with:
          context: ./alpine-${{ matrix.version }}/arm32v7/
          platforms: linux/arm/v7
          push: true
          tags: |
            ${{ env.IMAGE_NAME }}:${{ matrix.version }}-arm32v7
            ${{ env.IMAGE_NAME }}:${{ matrix.version }}-armhf
            ${{ env.IMAGE_NAME }}:${{ steps.version.outputs.major_minor }}-arm32v7
            ${{ env.IMAGE_NAME }}:${{ steps.version.outputs.major_minor }}-armhf
          build-args: |
            VCS_REF=${{ github.sha }}
            BUILD_DATE=$(date -u +'%Y-%m-%dT%H:%M:%SZ')

  # ARM64v8 build jobs for all versions
  build-arm64v8:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        version: [3.20.3, 3.19.4, 3.18.9, 3.17.10]
    steps:
      - uses: actions/checkout@v4
      
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3
        
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
        
      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Extract version components
        id: version
        run: |
          MAJOR_MINOR=$(echo "${{ matrix.version }}" | cut -d'.' -f1,2)
          echo "major_minor=${MAJOR_MINOR}" >> $GITHUB_OUTPUT

      - name: Build and push ARM64v8 images
        uses: docker/build-push-action@v5
        with:
          context: ./alpine-${{ matrix.version }}/arm64v8/
          platforms: linux/arm64/v8
          push: true
          tags: |
            ${{ env.IMAGE_NAME }}:${{ matrix.version }}-arm64v8
            ${{ env.IMAGE_NAME }}:${{ matrix.version }}-aarch64
            ${{ env.IMAGE_NAME }}:${{ steps.version.outputs.major_minor }}-arm64v8
            ${{ env.IMAGE_NAME }}:${{ steps.version.outputs.major_minor }}-aarch64
          build-args: |
            VCS_REF=${{ github.sha }}
            BUILD_DATE=$(date -u +'%Y-%m-%dT%H:%M:%SZ')

  # Create and push multi-arch manifests for each version
  create-manifests:
    needs: [build-amd64, build-arm32v7, build-arm64v8]
    runs-on: ubuntu-latest
    strategy:
      matrix:
        version: [3.20.3, 3.19.4, 3.18.9, 3.17.10]
    steps:
      - name: Extract version components
        id: version
        run: |
          MAJOR_MINOR=$(echo "${{ matrix.version }}" | cut -d'.' -f1,2)
          echo "major_minor=${MAJOR_MINOR}" >> $GITHUB_OUTPUT

      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Create and push version manifests
        run: |
          # Create manifest for full version (e.g., 3.20.3)
          docker buildx imagetools create -t ${{ env.IMAGE_NAME }}:${{ matrix.version }} \
            ${{ env.IMAGE_NAME }}:${{ matrix.version }}-amd64 \
            ${{ env.IMAGE_NAME }}:${{ matrix.version }}-arm32v7 \
            ${{ env.IMAGE_NAME }}:${{ matrix.version }}-arm64v8

          # Create manifest for major.minor version (e.g., 3.20)
          docker buildx imagetools create -t ${{ env.IMAGE_NAME }}:${{ steps.version.outputs.major_minor }} \
            ${{ env.IMAGE_NAME }}:${{ matrix.version }}-amd64 \
            ${{ env.IMAGE_NAME }}:${{ matrix.version }}-arm32v7 \
            ${{ env.IMAGE_NAME }}:${{ matrix.version }}-arm64v8

  # Create latest tag from newest version (3.20.3)
  create-latest:
    needs: [build-amd64, build-arm32v7, build-arm64v8]
    runs-on: ubuntu-latest
    steps:
      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Create and push latest manifest
        run: |
          docker buildx imagetools create -t ${{ env.IMAGE_NAME }}:latest \
            ${{ env.IMAGE_NAME }}:3.20.3-amd64 \
            ${{ env.IMAGE_NAME }}:3.20.3-arm32v7 \
            ${{ env.IMAGE_NAME }}:3.20.3-arm64v8